(ns boing.bean
  "Implement bean definitions and instanciations.
   Beans can be defined using defbean or defabean.
   Bean definitions trigger a search for constructors and setters of the given class.
   Instanciation of a bean can be done using create-bean on a bean definition."
  (:use
    [boing.core.types] [boing.core.reflector] [boing.context]
    [clojure.contrib.def]
    [clojure.contrib.trace])
  (:import [java.lang.reflect Modifier] [boing Util]))

(defvar- *singletons* (atom {}))

(defn- singleton?
  "Check if the given bean id corresponds to a singleton in the cache for the current context.
   if yes returns it."
  [beandef]
  (cond
    (= (:mode beandef) :singleton)
    (let [id (:id beandef)
          ctx (get-current-context)
          k (if (nil? ctx) id (keyword (str (name (:id ctx)) (name id))))]
      (get @*singletons* k))
    :else nil))

(defn- register-singleton
  "Register a singleton in the cache in the current context."
  [id instance]
  (let [ctx (get-current-context)
        k (if (nil? ctx) id (keyword (str (name (:id ctx)) (name id))))]
    (swap! *singletons* #(merge %1 %2) {k instance})))  

(defn defbean
  "Create a bean definition"
  [id java-class & {:keys [mode properties constructor-args factory init post] :or {mode :prototype}}]
  (try
      (let [setters (valid-bean-setters? java-class properties)
            constructor (valid-constructor? java-class constructor-args)
            factory-fn (if (empty? factory) nil (fn [] (factory (constructor) properties)))
            init-mth (if-not (nil? init) (valid-method-sig? java-class init))]
        (boing.core.types.Bean. (get-current-context) id java-class mode setters constructor constructor-args factory-fn init-mth post))
    (catch Exception e# (println (format "Error detected in bean definitions %s: %s" id (.getMessage e#))))))

(defn defabean
  "Create an anonymous bean definition. The bean inherits an autogenerated id"
  [java-class & {:keys [properties constructor-args factory init post]}]
  (defbean (keyword (gensym "anonymous"))
    java-class :properties properties :constructor-args constructor-args :factory factory :init init :post post))

(declare create-bean)
 
(defn- apply-setter
  "Apply setters to an allocated bean, We recurse through create-bean but the recursion level
   is acceptable. Bean hierarchies are not very deep most of the time."
  [instance s]
  (cond
    (instance? boing.core.types.Bean  (:value s)) (invoke-method instance (:setter s) (create-bean (:value s)))
;;    (keyword? (:value s) Search the bean definition in tne associated context
    :else (invoke-method instance (:setter s) (:value s))))

(defn create-bean
  "Instantiate an object from a bean definition"
  [beandef]
  (try 
    (if-let [singleton (singleton? beandef)]
	    singleton
	    (let [instance (invoke-constructor (:constructor beandef) (:constructor-args beandef))
	          setters (:setters beandef)]
	      (dorun (map (fn [e] (apply-setter instance (val e))) (:setters beandef)))
	      (if-not (nil? (:init beandef))
	        (invoke-method instance (:init beandef)))
	      (if-not (nil? (:post beandef))
	        ((:post beandef) instance))
	      (if (= (:mode beandef) :singleton) (register-singleton (:id beandef) instance))
	      instance))
    (catch Exception e# (throw (Exception. (.getCause e#))))))

